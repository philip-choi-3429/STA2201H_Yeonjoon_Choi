ylab("Ratio of MSE")+
xlab("Sample Size")+
labs(title = "MSE(Bayes)/MSE(ML) for Different Sample Size")+
theme_bw()
bay[500]
bay[100]
require(curl)
gurl = "https://raw.githubusercontent.com/MJAlexander/applied-stats-2023/main/data/sweden.csv"
df = readRDS(url(gurl, method="libcurl"))
require(curl)
gurl = "https://raw.githubusercontent.com/MJAlexander/applied-stats-2023/main/data/sweden.csv"
df = read.csv(url(gurl, method="libcurl"))
head(df)
df
temp = df|>
filter(age>=50)|>
group_by(year)|>
mutate(prop = deaths/pop)|>
summarize(mean_prop = mean(prop))
temp
ggplot(temp, aes(x = year, y = mean_prop))+
geom_point()
temp = df|>
filter(age>=50)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp
sum(df$deaths[which(df$year == 1990 & df$age>=50)])/sum(df$pop[which(df$year == 1990 & df$age>=50)])
ggplot(temp, aes(x = year, y = prop_total))+
geom_point()+
geom_smooth(method = "lm")+
ylab("Mortality Ratio, age >=50")+
labs(title= "Proportion of People that Died in each year, age >=50")
rep("50s", nrow(temp_1)),rep("50s", nrow(temp_1))
temp_1 = df|>
filter(age>=50 & age<60)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_2 = df|>
filter(age>=60 & age<70)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_3 = df|>
filter(age>=70 & age<80)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_3 = df|>
filter(age>=80 & age<90)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_4 = df|>
filter(age>=90)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp = rbind(temp_1, temp_2)
temp = rbind(temp, temp_3)
temp = rbind(temp, temp_4)
temp = rbind(temp, temp_5)
temp_1 = df|>
filter(age>=50 & age<60)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_2 = df|>
filter(age>=60 & age<70)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_3 = df|>
filter(age>=70 & age<80)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_4 = df|>
filter(age>=80 & age<90)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp_5 = df|>
filter(age>=90)|>
group_by(year)|>
summarize(prop_total = sum(deaths)/sum(pop))
temp = rbind(temp_1, temp_2)
temp = rbind(temp, temp_3)
temp = rbind(temp, temp_4)
temp = rbind(temp, temp_5)
age.group  = c(rep("50s", nrow(temp_1)),
rep("60s", nrow(temp_2)),
rep("70s", nrow(temp_3)),
rep("80s", nrow(temp_4)),
rep("90s or more", nrow(temp_5)))
ggplot(temp, aes(x = year, y = prop_total, color = age.group))+
geom_point()+
geom_smooth(method = "lm")+
ylab("Mortality Ratio")+
labs(title= "Proportion of People that Died in each year, for each age group")
head(temp_1)
summary(lm(prop_total~year, data = temp_1))
library(broom)
library(knitr)
# Generate fake data
set.seed(123)
my_data <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100),
x4 = rnorm(100),
x5 = rnorm(100))
# Fit the five linear models
model1 <- lm(y ~ x1, data = my_data)
model2 <- lm(y ~ x2, data = my_data)
model3 <- lm(y ~ x3, data = my_data)
model4 <- lm(y ~ x4, data = my_data)
model5 <- lm(y ~ x5, data = my_data)
# Extract the coefficients and standard errors using broom
models_list <- list(model1, model2, model3, model4, model5)
coefficients_list <- lapply(models_list, tidy)
# Create a table using knitr
coefficients_table <- knitr::kable(do.call(rbind, coefficients_list)[, c("term", "estimate")],
row.names = FALSE,
col.names = c("Variable", "Slope"))
# Print the table
print(coefficients_table)
model_1 = lm(prop_total~year, data = temp_1)
model_2 = lm(prop_total~year, data = temp_2)
model_3 = lm(prop_total~year, data = temp_3)
model_4 = lm(prop_total~year, data = temp_4)
model_5 = lm(prop_total~year, data = temp_5)
library(broom)
library(knitr)
models_list = list(model1, model2, model3, model4, model5)
coefficients_list = lapply(models_list, tidy)
# Create a table using knitr
coefficients_table = kable(do.call(rbind, coefficients_list)[, c("term", "estimate")],
row.names = FALSE,
col.names = c("Variable", "Slope"))
# Print the table
coefficients_table
coefficients_list
kable(do.call(rbind, coefficients_list)[, c("term", "estimate")],
row.names = FALSE,
col.names = c("Variable", "Slope"))
model_1$coefficients
model_1$coefficients[[2]]
slopes = c(model_1$coefficients[[2]],
model_2$coefficients[[2]],
model_3$coefficients[[2]],
model_4$coefficients[[2]],
model_5$coefficients[[2]])
slopes
df(slopes)
data.frame(slopes)
rbind(slopes)
model_1 = lm(prop_total~year, data = temp_1)
model_2 = lm(prop_total~year, data = temp_2)
model_3 = lm(prop_total~year, data = temp_3)
model_4 = lm(prop_total~year, data = temp_4)
model_5 = lm(prop_total~year, data = temp_5)
slopes = c(model_1$coefficients[[2]],
model_2$coefficients[[2]],
model_3$coefficients[[2]],
model_4$coefficients[[2]],
model_5$coefficients[[2]])
slopes = rbind(slopes)
row.names(slopes) = "Slope of the Linear Regression Line"
colnames(slopes) = c("50s","60s", "70s","80s","90s or more")
require(knitr)
kable(slopes)
barplot(slopes, xlab ="Age Group", ylab = "Slope of the Regression Line",
main="Slope of Regression Line for Each Age Group")
ggplot(temp, aes(x = year, y = prop_total))+
geom_point()+
geom_smooth(method = "lm")+
ylab("Total Death \ Total Population, age >=50")+
labs(title= "Proportion of People that Died in each year, age >=50")+
theme_bw()
df
head(df)
temp = df|>
filter(year == 2020)
temp
head(df)
tail(df)
min(df$age)
nrow(df)
ds
set.seed(182)
nsims <- 100
sigma <- 1 / sqrt(rgamma(nsims, 1, rate = 100))
beta0 <- rnorm(nsims, 0, 100)
beta1 <- rnorm(nsims, 0, 100)
dsims <- tibble(log_gest_c = (log(ds$gest)-mean(log(ds$gest)))/sd(log(ds$gest)))
dsims
nrow(ds)
for(i in 1:nsims){
this_mu <- beta0[i] + beta1[i]*dsims$log_gest_c
dsims[paste0(i)] <- this_mu + rnorm(nrow(dsims), 0, sigma[i])
}
dsim
dsims
dsl <- dsims %>%
pivot_longer(`1`:`10`, names_to = "sim", values_to = "sim_weight")
dsl
temp
set.seed(28192)
beta_1 = rnorm(1000, mean =0,sd= 1)
beta_2 = rnorm(1000,mean=0,sd=1)
sigma = abs(rnorm(1000,mean=0,sd=1))
prior_check = list()
for (i in 1:1000){
prior_check[[i]] = rnorm(nrow(ds),
mean = beta_1[i]+beta_2[i]*scale(log(ds$gest)),
sd = sigma[i])
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5)+
xlab("Log(Weight)")+
ylab("Frequency")+
labs(title = "Prior Predictive Check with Log Birth Weight and Gestational Age")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =10000)
beta = runif(nsim, min = 0, max = 10000)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*temp$age)
simul = rpois(nsim, lambda = mu*temp$pop)
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
prior_check[[i]]
mu
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =100)
beta = runif(nsim, min = 0, max = 100)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*temp$age)
simul = rpois(nsim, lambda = mu*temp$pop)
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
mu
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =20)
beta = runif(nsim, min = 0, max = 20)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*temp$age)
simul = rpois(nsim, lambda = mu*temp$pop)
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
mu
simul[[1]]
prior_check[[1]]
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =5)
beta = runif(nsim, min = 0, max = 5)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*temp$age)
simul = rpois(nsim, lambda = mu*temp$pop)
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
mu
simul
prior_check[[1]]
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =2)
beta = runif(nsim, min = 0, max =2)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*temp$age)
simul = rpois(nsim, lambda = mu*temp$pop)
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 1000
alpha =runif(nsim, min = 0, max =2)
beta = runif(nsim, min = 0, max =2)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 250
alpha =runif(nsim, min = 0, max =2)
beta = runif(nsim, min = 0, max =2)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram(binwidth = 0.5, aes(y = ..density..))+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 250
alpha =runif(nsim, min = 0, max =2)
beta = runif(nsim, min = 0, max =2)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = 0, max =2)
beta = runif(nsim, min = 0, max =2)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
temp
temp = df|>
filter(year == 2020)
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = -10, max =10)
beta = runif(nsim, min = -10, max =10)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = 0, max =6)
beta = runif(nsim, min = 0, max =6)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = 0, max =10)
beta = runif(nsim, min = 0, max =10)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = 0, max =10)
beta = runif(nsim, min = 0, max =10)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
set.seed(333113)
temp = df|>
filter(year == 2020)
nsim = 500
alpha =runif(nsim, min = 0, max =1)
beta = runif(nsim, min = 0, max =1)
prior_check = list()
for (i in 1:nsim){
mu = alpha[i]*exp(beta[i]*log(temp$age))
simul = rpois(nsim, lambda = mu*log(temp$pop))
prior_check[[i]] = simul
}
temp = data.frame(value = unlist(prior_check))
ggplot(data = temp, aes(x = value))+
geom_histogram()+
xlab("Death")+
ylab("Frequency")+
labs(title = "Prior Predictive Check")+
theme_bw()
nrow(dsl)
nrow(ds)
3842*100
length(dsl$sim_weight)
dsdl
head(dsl)
ncol(dsl)
dsims
ncol(dsims)
dim(dims)
ncol(dsims)
dim(dsims)
dsl
colname(dsims)
colnames(dsims)
colnames(dsl)
dsl$sim
